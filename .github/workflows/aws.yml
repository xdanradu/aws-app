# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  release:
    types: [created]

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Generate deployment package
      run: zip -r deploy.zip * -x "**node_modules**"

    - name: Get timestamp
      uses: gerred/actions/current-time@master
      id: current-time

    - name: Run string replace
      uses: frabert/replace-string-action@master
      id: format-time
      with:
        pattern: '[:\.]+'
        string: "${{ steps.current-time.outputs.time }}"
        replace-with: '-'
        flags: 'g'

    - name: Beanstalk Deploy
      uses: einaregilsson/beanstalk-deploy@v9
      with:
        # AWS Access Key
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        # AWS Secret Key
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # AWS Region
        region: us-east-1
        # Beanstalk application name
        application_name: PythonApp
        # Beanstalk environment name
        environment_name: Pythonapp-env
        # Version label for new Beanstalk version
        version_label: "my-app-${{ steps.format-time.outputs.replaced }}"
        # Zip file with the version to deploy. If skipped the action will deploy existing version.
        deployment_package: deploy.zip
        # If set to "true" then the action will deploy an existing version with the given version_label if it already exists, but otherwise create the version and deploy it.
        # use_existing_version_if_available: # optional
        # Whether the action should wait for the deployment to finish and log status messages during the wait. Default is "true". If set to "false" the action will start the deployment on Beanstalk and then exit.
        # wait_for_deployment: # optional
        # How many seconds to wait for the environment to return to Green state after deployment is finished. Default is 30 seconds.
        # wait_for_environment_recovery: # optional

    - name: Deployed!
      run: echo App deployed to ELB