on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  NODE_VERSION: '12.x'

    jobs:
      build-and-deploy:
        name: Build and Deploy
        runs-on: ubuntu-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v2

        - name: Use Node.js ${{ env.NODE_VERSION }}
          uses: actions/setup-node@v1
          with:
            node-version: ${{ env.NODE_VERSION }}

        - name: npm install, build, and test
          run: |
            # Build and test the project, then
            # deploy to Azure Web App.
            npm install
            npm run build --if-present
            npm run test --if-present

        - name: Generate deployment package
          run: zip -r deploy.zip * -x "**node_modules**"
      
        - name: Get timestamp
          uses: gerred/actions/current-time@master
          id: current-time
      
        - name: Run string replace
          uses: frabert/replace-string-action@master
          id: format-time
          with:
            pattern: '[:\.]+'
            string: "${{ steps.current-time.outputs.time }}"
            replace-with: '-'
            flags: 'g'
      
        - name: Beanstalk Deploy
          uses: einaregilsson/beanstalk-deploy@v9
          with:
            aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            region: us-east-1
            application_name: PythonApp
            environment_name: Pythonapp-env
            version_label: "my-app-${{ steps.format-time.outputs.replaced }}"
            deployment_package: deploy.zip
      
        - name: Deployed!
          run: echo App deployed to ELB
on:
  release:
    types: [created]

name: Deploy to Amazon EBS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Generate deployment package
      run: zip -r deploy.zip * -x "**node_modules**"

    - name: Get timestamp
      uses: gerred/actions/current-time@master
      id: current-time

    - name: Run string replace
      uses: frabert/replace-string-action@master
      id: format-time
      with:
        pattern: '[:\.]+'
        string: "${{ steps.current-time.outputs.time }}"
        replace-with: '-'
        flags: 'g'

    - name: Beanstalk Deploy
      uses: einaregilsson/beanstalk-deploy@v9
      with:
        # AWS Access Key
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        # AWS Secret Key
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        # AWS Region
        region: us-east-1
        # Beanstalk application name
        application_name: PythonApp
        # Beanstalk environment name
        environment_name: Pythonapp-env
        # Version label for new Beanstalk version
        version_label: "my-app-${{ steps.format-time.outputs.replaced }}"
        # Zip file with the version to deploy. If skipped the action will deploy existing version.
        deployment_package: deploy.zip
        # If set to "true" then the action will deploy an existing version with the given version_label if it already exists, but otherwise create the version and deploy it.
        # use_existing_version_if_available: # optional
        # Whether the action should wait for the deployment to finish and log status messages during the wait. Default is "true". If set to "false" the action will start the deployment on Beanstalk and then exit.
        # wait_for_deployment: # optional
        # How many seconds to wait for the environment to return to Green state after deployment is finished. Default is 30 seconds.
        # wait_for_environment_recovery: # optional

    - name: Deployed!
      run: echo App deployed to ELB